{"version":3,"sources":["bundles/f0f51e0c471b5b038462/5.js","src/async-components/views/dialogs/EncryptedEventDialog.js"],"names":["webpackJsonp","1349","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_promise","_promise2","_languageHandler","React","sdk","MatrixClientPeg","createClass","displayName","propTypes","event","PropTypes","object","isRequired","onFinished","func","getInitialState","device","componentWillMount","_this","this","_unmounted","client","get","refreshDevice","then","dev","downloadKeys","props","getSender","setState","on","onDeviceVerificationChanged","err","console","log","componentWillUnmount","removeListener","resolve","getEventSenderDeviceInfo","userId","_this2","onKeyDown","e","keyCode","stopPropagation","preventDefault","_renderDeviceInfo","state","createElement","_t","verificationStatus","isBlocked","isVerified","getDisplayName","deviceId","getFingerprint","_renderEventInfo","getSenderKey","getKeysClaimed","ed25519","getWireContent","algorithm","getContent","msgtype","body","session_id","render","DeviceVerifyButtons","getComponent","buttons","className","onClick","autoFocus"],"mappings":"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","file":"bundles/f0f51e0c471b5b038462/5.js","sourcesContent":["webpackJsonp([5],{\n\n/***/ 1349:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _promise = __webpack_require__(129);\n\t\n\tvar _promise2 = _interopRequireDefault(_promise);\n\t\n\tvar _languageHandler = __webpack_require__(2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/*\n\tCopyright 2015, 2016 OpenMarket Ltd\n\t\n\tLicensed under the Apache License, Version 2.0 (the \"License\");\n\tyou may not use this file except in compliance with the License.\n\tYou may obtain a copy of the License at\n\t\n\t    http://www.apache.org/licenses/LICENSE-2.0\n\t\n\tUnless required by applicable law or agreed to in writing, software\n\tdistributed under the License is distributed on an \"AS IS\" BASIS,\n\tWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\tSee the License for the specific language governing permissions and\n\tlimitations under the License.\n\t*/\n\t\n\tvar React = __webpack_require__(1);\n\t\n\tvar sdk = __webpack_require__(3);\n\tvar MatrixClientPeg = __webpack_require__(5);\n\t\n\tmodule.exports = React.createClass({\n\t    displayName: 'EncryptedEventDialog',\n\t\n\t    propTypes: {\n\t        event: React.PropTypes.object.isRequired,\n\t        onFinished: React.PropTypes.func.isRequired\n\t    },\n\t\n\t    getInitialState: function getInitialState() {\n\t        return { device: null };\n\t    },\n\t\n\t    componentWillMount: function componentWillMount() {\n\t        var _this = this;\n\t\n\t        this._unmounted = false;\n\t        var client = MatrixClientPeg.get();\n\t\n\t        // first try to load the device from our store.\n\t        //\n\t        this.refreshDevice().then(function (dev) {\n\t            if (dev) {\n\t                return dev;\n\t            }\n\t\n\t            // tell the client to try to refresh the device list for this user\n\t            return client.downloadKeys([_this.props.event.getSender()], true).then(function () {\n\t                return _this.refreshDevice();\n\t            });\n\t        }).then(function (dev) {\n\t            if (_this._unmounted) {\n\t                return;\n\t            }\n\t\n\t            _this.setState({ device: dev });\n\t            client.on(\"deviceVerificationChanged\", _this.onDeviceVerificationChanged);\n\t        }, function (err) {\n\t            console.log(\"Error downloading devices\", err);\n\t        });\n\t    },\n\t\n\t    componentWillUnmount: function componentWillUnmount() {\n\t        this._unmounted = true;\n\t        var client = MatrixClientPeg.get();\n\t        if (client) {\n\t            client.removeListener(\"deviceVerificationChanged\", this.onDeviceVerificationChanged);\n\t        }\n\t    },\n\t\n\t    refreshDevice: function refreshDevice() {\n\t        // Promise.resolve to handle transition from static result to promise; can be removed\n\t        // in future\n\t        return _promise2.default.resolve(MatrixClientPeg.get().getEventSenderDeviceInfo(this.props.event));\n\t    },\n\t\n\t    onDeviceVerificationChanged: function onDeviceVerificationChanged(userId, device) {\n\t        var _this2 = this;\n\t\n\t        if (userId == this.props.event.getSender()) {\n\t            this.refreshDevice().then(function (dev) {\n\t                _this2.setState({ device: dev });\n\t            });\n\t        }\n\t    },\n\t\n\t    onKeyDown: function onKeyDown(e) {\n\t        if (e.keyCode === 27) {\n\t            // escape\n\t            e.stopPropagation();\n\t            e.preventDefault();\n\t            this.props.onFinished(false);\n\t        }\n\t    },\n\t\n\t    _renderDeviceInfo: function _renderDeviceInfo() {\n\t        var device = this.state.device;\n\t        if (!device) {\n\t            return React.createElement(\n\t                'i',\n\t                null,\n\t                (0, _languageHandler._t)('unknown device')\n\t            );\n\t        }\n\t\n\t        var verificationStatus = React.createElement(\n\t            'b',\n\t            null,\n\t            (0, _languageHandler._t)('NOT verified')\n\t        );\n\t        if (device.isBlocked()) {\n\t            verificationStatus = React.createElement(\n\t                'b',\n\t                null,\n\t                (0, _languageHandler._t)('Blacklisted')\n\t            );\n\t        } else if (device.isVerified()) {\n\t            verificationStatus = (0, _languageHandler._t)('verified');\n\t        }\n\t\n\t        return React.createElement(\n\t            'table',\n\t            null,\n\t            React.createElement(\n\t                'tbody',\n\t                null,\n\t                React.createElement(\n\t                    'tr',\n\t                    null,\n\t                    React.createElement(\n\t                        'td',\n\t                        null,\n\t                        (0, _languageHandler._t)('Name')\n\t                    ),\n\t                    React.createElement(\n\t                        'td',\n\t                        null,\n\t                        device.getDisplayName()\n\t                    )\n\t                ),\n\t                React.createElement(\n\t                    'tr',\n\t                    null,\n\t                    React.createElement(\n\t                        'td',\n\t                        null,\n\t                        (0, _languageHandler._t)('Device ID')\n\t                    ),\n\t                    React.createElement(\n\t                        'td',\n\t                        null,\n\t                        React.createElement(\n\t                            'code',\n\t                            null,\n\t                            device.deviceId\n\t                        )\n\t                    )\n\t                ),\n\t                React.createElement(\n\t                    'tr',\n\t                    null,\n\t                    React.createElement(\n\t                        'td',\n\t                        null,\n\t                        (0, _languageHandler._t)('Verification')\n\t                    ),\n\t                    React.createElement(\n\t                        'td',\n\t                        null,\n\t                        verificationStatus\n\t                    )\n\t                ),\n\t                React.createElement(\n\t                    'tr',\n\t                    null,\n\t                    React.createElement(\n\t                        'td',\n\t                        null,\n\t                        (0, _languageHandler._t)('Ed25519 fingerprint')\n\t                    ),\n\t                    React.createElement(\n\t                        'td',\n\t                        null,\n\t                        React.createElement(\n\t                            'code',\n\t                            null,\n\t                            device.getFingerprint()\n\t                        )\n\t                    )\n\t                )\n\t            )\n\t        );\n\t    },\n\t\n\t    _renderEventInfo: function _renderEventInfo() {\n\t        var event = this.props.event;\n\t\n\t        return React.createElement(\n\t            'table',\n\t            null,\n\t            React.createElement(\n\t                'tbody',\n\t                null,\n\t                React.createElement(\n\t                    'tr',\n\t                    null,\n\t                    React.createElement(\n\t                        'td',\n\t                        null,\n\t                        (0, _languageHandler._t)('User ID')\n\t                    ),\n\t                    React.createElement(\n\t                        'td',\n\t                        null,\n\t                        event.getSender()\n\t                    )\n\t                ),\n\t                React.createElement(\n\t                    'tr',\n\t                    null,\n\t                    React.createElement(\n\t                        'td',\n\t                        null,\n\t                        (0, _languageHandler._t)('Curve25519 identity key')\n\t                    ),\n\t                    React.createElement(\n\t                        'td',\n\t                        null,\n\t                        React.createElement(\n\t                            'code',\n\t                            null,\n\t                            event.getSenderKey() || React.createElement(\n\t                                'i',\n\t                                null,\n\t                                (0, _languageHandler._t)('none')\n\t                            )\n\t                        )\n\t                    )\n\t                ),\n\t                React.createElement(\n\t                    'tr',\n\t                    null,\n\t                    React.createElement(\n\t                        'td',\n\t                        null,\n\t                        (0, _languageHandler._t)('Claimed Ed25519 fingerprint key')\n\t                    ),\n\t                    React.createElement(\n\t                        'td',\n\t                        null,\n\t                        React.createElement(\n\t                            'code',\n\t                            null,\n\t                            event.getKeysClaimed().ed25519 || React.createElement(\n\t                                'i',\n\t                                null,\n\t                                (0, _languageHandler._t)('none')\n\t                            )\n\t                        )\n\t                    )\n\t                ),\n\t                React.createElement(\n\t                    'tr',\n\t                    null,\n\t                    React.createElement(\n\t                        'td',\n\t                        null,\n\t                        (0, _languageHandler._t)('Algorithm')\n\t                    ),\n\t                    React.createElement(\n\t                        'td',\n\t                        null,\n\t                        event.getWireContent().algorithm || React.createElement(\n\t                            'i',\n\t                            null,\n\t                            (0, _languageHandler._t)('unencrypted')\n\t                        )\n\t                    )\n\t                ),\n\t                event.getContent().msgtype === 'm.bad.encrypted' ? React.createElement(\n\t                    'tr',\n\t                    null,\n\t                    React.createElement(\n\t                        'td',\n\t                        null,\n\t                        (0, _languageHandler._t)('Decryption error')\n\t                    ),\n\t                    React.createElement(\n\t                        'td',\n\t                        null,\n\t                        event.getContent().body\n\t                    )\n\t                ) : null,\n\t                React.createElement(\n\t                    'tr',\n\t                    null,\n\t                    React.createElement(\n\t                        'td',\n\t                        null,\n\t                        (0, _languageHandler._t)('Session ID')\n\t                    ),\n\t                    React.createElement(\n\t                        'td',\n\t                        null,\n\t                        React.createElement(\n\t                            'code',\n\t                            null,\n\t                            event.getWireContent().session_id || React.createElement(\n\t                                'i',\n\t                                null,\n\t                                (0, _languageHandler._t)('none')\n\t                            )\n\t                        )\n\t                    )\n\t                )\n\t            )\n\t        );\n\t    },\n\t\n\t    render: function render() {\n\t        var DeviceVerifyButtons = sdk.getComponent('elements.DeviceVerifyButtons');\n\t\n\t        var buttons = null;\n\t        if (this.state.device) {\n\t            buttons = React.createElement(DeviceVerifyButtons, { device: this.state.device,\n\t                userId: this.props.event.getSender()\n\t            });\n\t        }\n\t\n\t        return React.createElement(\n\t            'div',\n\t            { className: 'mx_EncryptedEventDialog', onKeyDown: this.onKeyDown },\n\t            React.createElement(\n\t                'div',\n\t                { className: 'mx_Dialog_title' },\n\t                (0, _languageHandler._t)('End-to-end encryption information')\n\t            ),\n\t            React.createElement(\n\t                'div',\n\t                { className: 'mx_Dialog_content' },\n\t                React.createElement(\n\t                    'h4',\n\t                    null,\n\t                    (0, _languageHandler._t)('Event information')\n\t                ),\n\t                this._renderEventInfo(),\n\t                React.createElement(\n\t                    'h4',\n\t                    null,\n\t                    (0, _languageHandler._t)('Sender device information')\n\t                ),\n\t                this._renderDeviceInfo()\n\t            ),\n\t            React.createElement(\n\t                'div',\n\t                { className: 'mx_Dialog_buttons' },\n\t                React.createElement(\n\t                    'button',\n\t                    { className: 'mx_Dialog_primary', onClick: this.props.onFinished, autoFocus: true },\n\t                    (0, _languageHandler._t)('OK')\n\t                ),\n\t                buttons\n\t            )\n\t        );\n\t    }\n\t});\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// bundles/f0f51e0c471b5b038462/5.js","/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar React = require(\"react\");\nimport { _t } from '../../../languageHandler';\nvar sdk = require('../../../index');\nvar MatrixClientPeg = require(\"../../../MatrixClientPeg\");\n\nmodule.exports = React.createClass({\n    displayName: 'EncryptedEventDialog',\n\n    propTypes: {\n        event: React.PropTypes.object.isRequired,\n        onFinished: React.PropTypes.func.isRequired,\n    },\n\n    getInitialState: function() {\n        return { device: null };\n    },\n\n    componentWillMount: function() {\n        this._unmounted = false;\n        var client = MatrixClientPeg.get();\n\n        // first try to load the device from our store.\n        //\n        this.refreshDevice().then((dev) => {\n            if (dev) {\n                return dev;\n            }\n\n            // tell the client to try to refresh the device list for this user\n            return client.downloadKeys([this.props.event.getSender()], true).then(() => {\n                return this.refreshDevice();\n            });\n        }).then((dev) => {\n            if (this._unmounted) {\n                return;\n            }\n\n            this.setState({ device: dev });\n            client.on(\"deviceVerificationChanged\", this.onDeviceVerificationChanged);\n        }, (err)=>{\n            console.log(\"Error downloading devices\", err);\n        });\n    },\n\n    componentWillUnmount: function() {\n        this._unmounted = true;\n        var client = MatrixClientPeg.get();\n        if (client) {\n            client.removeListener(\"deviceVerificationChanged\", this.onDeviceVerificationChanged);\n        }\n    },\n\n    refreshDevice: function() {\n        // Promise.resolve to handle transition from static result to promise; can be removed\n        // in future\n        return Promise.resolve(MatrixClientPeg.get().getEventSenderDeviceInfo(this.props.event));\n    },\n\n    onDeviceVerificationChanged: function(userId, device) {\n        if (userId == this.props.event.getSender()) {\n            this.refreshDevice().then((dev) => {\n                this.setState({ device: dev });\n            });\n        }\n    },\n\n    onKeyDown: function(e) {\n        if (e.keyCode === 27) { // escape\n            e.stopPropagation();\n            e.preventDefault();\n            this.props.onFinished(false);\n        }\n    },\n\n    _renderDeviceInfo: function() {\n        var device = this.state.device;\n        if (!device) {\n            return (<i>{ _t('unknown device') }</i>);\n        }\n\n        var verificationStatus = (<b>{ _t('NOT verified') }</b>);\n        if (device.isBlocked()) {\n            verificationStatus = (<b>{ _t('Blacklisted') }</b>);\n        } else if (device.isVerified()) {\n            verificationStatus = _t('verified');\n        }\n\n        return (\n            <table>\n                <tbody>\n                    <tr>\n                        <td>{ _t('Name') }</td>\n                        <td>{ device.getDisplayName() }</td>\n                    </tr>\n                    <tr>\n                        <td>{ _t('Device ID') }</td>\n                        <td><code>{ device.deviceId }</code></td>\n                    </tr>\n                    <tr>\n                        <td>{ _t('Verification') }</td>\n                        <td>{ verificationStatus }</td>\n                    </tr>\n                    <tr>\n                        <td>{ _t('Ed25519 fingerprint') }</td>\n                        <td><code>{device.getFingerprint()}</code></td>\n                    </tr>\n                </tbody>\n            </table>\n        );\n    },\n\n    _renderEventInfo: function() {\n        var event = this.props.event;\n\n        return (\n            <table>\n                <tbody>\n                    <tr>\n                        <td>{ _t('User ID') }</td>\n                        <td>{ event.getSender() }</td>\n                    </tr>\n                    <tr>\n                        <td>{ _t('Curve25519 identity key') }</td>\n                        <td><code>{ event.getSenderKey() || <i>{ _t('none') }</i> }</code></td>\n                    </tr>\n                    <tr>\n                        <td>{ _t('Claimed Ed25519 fingerprint key') }</td>\n                        <td><code>{ event.getKeysClaimed().ed25519 || <i>{ _t('none') }</i> }</code></td>\n                    </tr>\n                    <tr>\n                        <td>{ _t('Algorithm') }</td>\n                        <td>{ event.getWireContent().algorithm || <i>{ _t('unencrypted') }</i> }</td>\n                    </tr>\n                {\n                    event.getContent().msgtype === 'm.bad.encrypted' ? (\n                    <tr>\n                        <td>{ _t('Decryption error') }</td>\n                        <td>{ event.getContent().body }</td>\n                    </tr>\n                    ) : null\n                }\n                    <tr>\n                        <td>{ _t('Session ID') }</td>\n                        <td><code>{ event.getWireContent().session_id || <i>{ _t('none') }</i> }</code></td>\n                    </tr>\n                </tbody>\n            </table>\n        );\n    },\n\n    render: function() {\n        var DeviceVerifyButtons = sdk.getComponent('elements.DeviceVerifyButtons');\n\n        var buttons = null;\n        if (this.state.device) {\n            buttons = (\n                <DeviceVerifyButtons device={ this.state.device }\n                    userId={ this.props.event.getSender() }\n                />\n            );\n        }\n\n        return (\n            <div className=\"mx_EncryptedEventDialog\" onKeyDown={ this.onKeyDown }>\n                <div className=\"mx_Dialog_title\">\n                    { _t('End-to-end encryption information') }\n                </div>\n                <div className=\"mx_Dialog_content\">\n                    <h4>{ _t('Event information') }</h4>\n                    {this._renderEventInfo()}\n\n                    <h4>{ _t('Sender device information') }</h4>\n                    {this._renderDeviceInfo()}\n                </div>\n                <div className=\"mx_Dialog_buttons\">\n                    <button className=\"mx_Dialog_primary\" onClick={ this.props.onFinished } autoFocus={ true }>\n                        { _t('OK') }\n                    </button>\n                    {buttons}\n                </div>\n            </div>\n        );\n    }\n});\n\n\n\n// WEBPACK FOOTER //\n// ../../../../src/async-components/views/dialogs/EncryptedEventDialog.js"],"sourceRoot":""}